name: Running Code Coverage

on: [push, pull_request]

env:
  PGHOST: ${{secrets.PGHOST}}
  PGDATABASE: ${{secrets.PGDATABASE}}
  PGUSER: ${{secrets.PGUSER}}
  PGPASSWORD: ${{secrets.PGPASSWORD}}
  NEXT_PUBLIC_ACCESS_TOKEN_SECRET: ${{ secrets.NEXT_PUBLIC_ACCESS_TOKEN_SECRET }}
  NEXT_PUBLIC_THEMOVIEDB_ACCESS_TOKEN: ${{secrets.NEXT_PUBLIC_THEMOVIEDB_ACCESS_TOKEN}}
  NEXT_PUBLIC_ACCESS_TOKEN: ${{secrets.NEXT_PUBLIC_ACCESS_TOKEN}}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 16.x]
        # node-version: [18.x, 16.x, 14.x] comment out cos it keeps building nonstop on 14.x

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.5.3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test:ci

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: apitests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

      - name: Project versioning
        uses: paulhatch/semantic-version@v5.0.2
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}-prerelease${increment}"
          # Named version, will be used as suffix for name version tag
          namespace: my-service
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
